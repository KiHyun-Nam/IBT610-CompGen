#Input : genome sequence
DNA=input("Enter a DNA sequence:")
#대문자로 바꾸기
dna_space=DNA.upper()
#띄어쓰기 지우기
dna=dna_space.replace(" ","")


#Make complementary sequence
def reverse_complement(dna):
     complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}
     return ''.join([complement[base] for base in dna[::-1]]) #상보적 서열
reverse_dna=reverse_complement(dna)


#ORF find 함수 정의
#triplet만 추가(1, 2개 nucleotide 버리기)
def find_orf(frame):
    frame_codon = [codon_table[triplet] for triplet in frame if triplet in codon_table]
    frame_trans = ''.join(frame_codon)
    
#start site 찾기
    start_site = []
    index = -1
    orf_end = 0
    
    while True:
        index = frame_trans.find('M', index + 1)
        if index == -1:
            break
        start_site.append(index)

    for site in start_site:
        if site < orf_end:
            continue

#start site부터 끊기(start codon site 앞 삭제)
        frame_cut = frame_trans[site:]
        
#stop codon까지 끊기
        if '*' not in frame_cut:
                continue
        stop_codon = frame_cut.find('*') + site + 1
        orf_sequence = ''.join(frame[site:stop_codon])
        amino_sequence = frame_cut.split('*')[0]

        output.append((orf_sequence, amino_sequence))
        orf_end = site + len(amino_sequence) + 1

    return output
    

#Codon definition
codon_table = {'TTT': 'F', 'TTC': 'F', 'TTA': 'L', 'TTG': 'L', 'TCT': 'S','TCC': 'S', 'TCA': 'S', 'TCG': 'S', 'TAT': 'Y', 'TAC': 'Y', 'TAA':'*','TAG':'*', 'TGA':'*', 
'TGT': 'C', 'TGC': 'C', 'TGG': 'W', 'CTT': 'L', 'CTC': 'L', 'CTA': 'L', 'CTG': 'L', 'CCT': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P', 'CAT': 'H', 'CAC': 'H', 'CAA': 'Q', 
'CAG': 'Q','CGT': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R', 'ATT': 'I', 'ATC': 'I', 'ATA': 'I','ATG': 'M', 'ACT': 'T', 'ACC': 'T','ACA': 'T', 'ACG': 'T', 'AAT': 'N',
'AAC': 'N', 'AAA': 'K','AAG': 'K', 'AGT': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R','GTT': 'V', 'GTC': 'V', 'GTA': 'V', 'GTG': 'V', 'GCT': 'A','GCC': 'A', 'GCA': 'A', 
'GCG': 'A', 'GAT': 'D','GAC': 'D','GAA': 'E', 'GAG': 'E', 'GGT': 'G', 'GGC': 'G', 'GGA': 'G','GGG': 'G'}
               

#ORF minimum length 입력
minimum_length = int(input("minimum ORF length:"))

#find ORF
length_list = []
output=open('output.txt','w')

for repeat in range(6):
    if repeat < 3:
        frame = [dna[i:i+3] for i in range(repeat%3, len(dna), 3)] 
    else:
        frame = [reverse_dna[i:i+3] for i in range(repeat%3, len(dna), 3)] 

    if repeat < 3:
        frame_number = '+%s' % (repeat + 1)
    else:
        frame_number = 2 - repeat

    orf_list = find_orf(frame)
    for orf in orf_list:
        nt = orf[0]
        aa = orf[1]
        if len(nt) <= minimum_length:
            continue
        output.write('>\n ORF frame number: %s\n ORF nucleotide seqeunce: %s\n ORF amino acid seqeunce: %s\n ORF nucleotide lenth: %s\n ORF amino acid length:%s\n \n' 
                     % (frame_number, nt, aa, len(nt), len(aa)))
        length_list.append(len(nt))


#jupyter notebook에서 결과 읽기
out=open('output.txt', 'r', encoding='utf-8')
for result in out:
    print(result)
        
     
#ORF 길이 분포
import matplotlib.pyplot as plt
plt.hist(length_list, bins=30)
plt.xlabel('ORF length')
plt.ylabel('frequency')
plt.show()
