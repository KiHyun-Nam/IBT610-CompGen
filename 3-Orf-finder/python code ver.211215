#Input : genome sequence
DNA=input("Enter a DNA sequence:")
#대문자로 바꾸기
dna_space=DNA.upper()
#띄어쓰기 지우기
dna=dna_space.replace(" ","")


#Make complementary sequence
def reverse_complement(dna):
     complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}
     return ''.join([complement[base] for base in dna[::-1]]) #상보적 서열
reverse_dna=reverse_complement(dna)


#codon table
codon_table = {}
table_selection = input("Select your Codon Table Number \n(1. The Standard Code \n2. The Vertebrate Mitochondrial Code \n3. The Yeast Mitochondrial Code \n4. The Mold, Protozoan, and Coelenterate Mitochondrial Code and the Mycoplasma/Spiroplasma Code \n5. The Invertebrate Mitochondrial Code \n6. The Ciliate, Dasycladacean and Hexamita Nuclear Code \n9. The Echinoderm and Flatworm Mitochondrial Code \n10. The Euplotid Nuclear Code \n11. The Bacterial, Archaeal and Plant Plastid Code \n12. The Alternative Yeast Nuclear Code \n13. The Ascidian Mitochondrial Code \n14. The Alternative Flatworm Mitochondrial Code \n16. Chlorophycean Mitochondrial Code \n21. Trematode Mitochondrial Code \n22. Scenedesmus obliquus Mitochondrial Code \n23. Thraustochytrium Mitochondrial Code \n24. Rhabdopleuridae Mitochondrial Code \n25. Candidate Division SR1 and Gracilibacteria Code \n26. Pachysolen tannophilus Nuclear Code \n27. Karyorelict Nuclear Code \n28. Condylostoma Nuclear Code \n29. Mesodinium Nuclear Code \n30. Peritrich Nuclear Code \n31. Blastocrithidia Nuclear Code \n33. Cephalodiscidae Mitochondrial UAA-Tyr Code)\n:")
codon_file_name = 'transl_table_' + table_selection + '.txt'

codon_table1 = open(str(codon_file_name))

for line in codon_table1:
    line = line.rstrip()
    line_split = line.split('\t')

    for block in line_split:
        block_split = block.split(' ')
        codon = block_split[0]
        amino_acid = block_split[1]

        codon_table[codon] = amino_acid


#ORF find 함수 정의
#triplet만 추가(1, 2개 nucleotide 버리기)
def find_orf(frame):
    frame_codon = [codon_table[triplet] for triplet in frame if triplet in codon_table]
    frame_trans = ''.join(frame_codon)
    
#start site 찾기
    start_site = []
    index = -1
    orf_end = 0
    output=[]
    
    while True:
        index = frame_trans.find('M', index + 1)
        if index == -1:
            break
        start_site.append(index)

    for site in start_site:
        if site < orf_end:
            continue

#start site부터 끊기(start codon site 앞 삭제)
        frame_cut = frame_trans[site:]
        
#stop codon까지 끊기
        if '*' not in frame_cut:
                continue
        stop_codon = frame_cut.find('*') + site + 1
        orf_sequence = ''.join(frame[site:stop_codon])
        amino_sequence = frame_cut.split('*')[0]

        output.append((orf_sequence, amino_sequence))
        orf_end = site + len(amino_sequence) + 1

    return output
               

#ORF minimum length 입력
minimum_length = int(input("minimum ORF length:"))


#find ORF
length_list = []
orf_nt_list = []
output=open('output.txt','w')

for repeat in range(6):
    if repeat < 3:
        frame = [dna[i:i+3] for i in range(repeat%3, len(dna), 3)] 
    else:
        frame = [reverse_dna[i:i+3] for i in range(repeat%3, len(dna), 3)] 

    if repeat < 3:
        frame_number = '+%s' % (repeat + 1)
    else:
        frame_number = 2 - repeat

    orf_list = find_orf(frame)
    for orf in orf_list:
        nt = orf[0]
        aa = orf[1]
        if len(nt) <= minimum_length:
            continue
        output.write('>\n ORF frame number: %s\n ORF nucleotide seqeunce: %s\n ORF amino acid seqeunce: %s\n ORF nucleotide lenth: %s\n ORF amino acid length:%s\n \n' 
                     % (frame_number, nt, aa, len(nt), len(aa)))
        length_list.append(len(nt))
        orf_nt_list.append(str(nt))


#jupyter notebook에서 결과 읽기
out=open('output.txt', 'r', encoding='utf-8')
for result in out:
    print(result)
        
     
#ORF 길이 분포
import matplotlib.pyplot as plt
plt.hist(length_list, bins=30)
plt.xlabel('ORF length')
plt.ylabel('frequency')
plt.show()

#가장 긴 ORF 서열 찾기
print(max(orf_nt_list, key = len))
