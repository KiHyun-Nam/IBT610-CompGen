### Sequence Input
from Bio.Restriction import *
from Bio.SeqUtils import MeltingTemp as mt
from Bio.Seq import Seq
import sys, numpy as np
import os
import pandas as pd
import re
import requests
import json

def check_GC(seq):
    """   Measures the GC content of a sequence """
    return (seq.upper().count('G') + seq.upper().count('C'))/float(len(seq))

def get_fragments(seq):
    """
    get fragment sequence according to the number of fragments.
    n is the number of fragments.
    """
my_seq = Seq("GATCGATGGGCCTATATAGGATCGAAAATCGGTGGCGATCGCCGAAGGAGTCCGCTCGAATCGGGCTCCTAGCTGATATTTACCACTATTCAGCTAGCTAGGCTTTAGCGATCGATGCTATTACTTTCTATCTTCATATCTTATCTATCTTCTTATATAAAACACAATCTTATTCTCTCTCTATTTCTCTCTATCTACTATCGATCGATTGCCCCTAAGCTAGCTATCATCCCTAGCCTTAATATTCTCTCGCGCAGATCGATCGGGCAATATCGATCGGATCCGATCCGAAAGCCTAATCGAATCTCTAGAGCTAGCTAATTCGATCGATCTCCTAGAGCTCTAGCTAGCTTTGGGC")
len(my_seq)
n=4 #number of fragments
#number_overlap = 20
s=20
n0=round(len(my_seq)/n)
n1=round(len(my_seq)/n)+s
n2=round(len(my_seq)/n)*2+s
n3=round(len(my_seq)/n)*3+s

#get_fragment sequence
for i in range(0,n0):
    dna0 = my_seq[0:(i+s)]
    dna1 = my_seq[i:(i+n1)]
    dna2 = my_seq[(i+n1-s):(i+n2)]
    dna3 = my_seq[(i+n2-s):(i+n3)]
    dna4 = my_seq[(i+n3-s):(len(my_seq))]+dna0 

    #get_overlapped sequence
    dna1_2_overlap = my_seq[(i+n1-s):(i+n1)]
    dna2_3_overlap = my_seq[(i+n2-s):(i+n2)]
    dna3_4_overlap = my_seq[(i+n3-s):(i+n3)]
    dna4_1_overlap = my_seq[i:(i+s)]
    
    if i == 0:
        seq = dna1_2_overlap
        tm1 = m = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
        print(tm1)
        gc1 = check_GC(seq)
        print ("gc1 :",gc1)
        
        seq = dna2_3_overlap
        tm2 = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
        print(tm2)
        gc2 = check_GC(seq)
        print ("gc2 :",gc2)
        
        seq = dna3_4_overlap
        tm3 = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
        print(tm3)
        gc3 = check_GC(seq)
        print ("gc3 :",gc3)
        print (seq)
    
        seq = dna4_1_overlap
        tm4 = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
        print(tm4)
        gc4 = check_GC(seq)
        print ("gc4 :",gc4)
        
        while max([tm1,tm2,tm3,tm4]) > 60 or min([gc1,gc2,gc3,gc4]) < 0.4 or max([gc1,gc2,gc3,gc4]) > 0.6:
            dna1 = my_seq[i:(i+n1)]
            dna1_2_overlap = my_seq[(i+n1-s):(i+n1)]
            seq = dna1_2_overlap
            tm1 = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
            gc1 = check_GC(seq)
            dna2 = my_seq[(i+n1-s):(i+n2)]
            dna2_3_overlap = my_seq[(i+n2-s):(i+n2)]
            seq = dna2_3_overlap
            tm2 = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
            gc2 = check_GC(seq)
            dna3 = my_seq[(i+n2-s):(i+n3)]
            dna3_4_overlap = my_seq[(i+n3-s):(i+n3)]
            seq = dna3_4_overlap
            tm3 = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
            gc3 = check_GC(seq)
            dna0 = my_seq[0:(i+s)]
            dna4 = my_seq[(i+n3-s):(len(my_seq))]+dna0
            dna4_1_overlap = my_seq[i:(i+s)]
            seq = dna4_1_overlap
            tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
            gc4 = check_GC(seq)
            i += 1

        else:
            print(i)
            print(tm1)
            print(gc1)
            print(dna1)
            print(dna1_2_overlap)
            print(tm2)
            print(gc2)
            print(dna2)
            print(dna2_3_overlap)
            print(tm3)
            print(gc3)
            print(dna3)
            print(dna3_4_overlap)
            print(tm4)
            print(gc4)
            print(dna4)
            print(dna4_1_overlap)
            break

# get forward primer sequence
def get_primer_F(seq):
    """ get forward primer sequence for each fragment """
        
s = 20

for x in range(0, n0-s):
    primer1_F = dna4_1_overlap + dna1[s:s+x]
    seq = primer1_F
    tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
    x = 0
    while tm < 60:
        primer1_F = dna4_1_overlap + dna1[s:s+x]
        seq = primer1_F
        tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6) 
        x += 1
    else:
        print(primer1_F)
        print(x)
        print(tm)
        break
        

for x in range(0, n0-s):
    primer2_F = dna1_2_overlap + dna2[s:s+x]
    seq = primer2_F
    tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
    x = 0
    while tm < 60:
        primer2_F = dna1_2_overlap + dna2[s:s+x]
        seq = primer2_F
        tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6) 
        x += 1
    else:
        print(primer2_F)
        print(x)
        print(tm)
        break
                
        
for x in range(0, n0-s):
    primer3_F = dna2_3_overlap + dna3[s:s+x]
    seq = primer3_F
    tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
    x = 0
    while tm < 60:
        primer3_F = dna2_3_overlap + dna3[s:s+x]
        seq = primer3_F
        tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6) 
        x += 1
    else:
        print(primer3_F)
        print(x)
        print(tm)
        break


for x in range(0, n0-s):
    primer4_F = dna3_4_overlap + dna4[s:s+x]
    seq = primer4_F
    tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
    x = 0
    while tm < 60:
        primer4_F = dna3_4_overlap + dna4[s:s+x]
        seq = primer4_F
        tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6) 
        x += 1
    else:
        print(primer4_F)
        print(x)
        print(tm)
        break

# get reverse primer sequence
def get_primer_R(seq):
    """ get reverse primer sequence for each fragment """
    return str(Seq(seq).reverse_complement())
rc = get_primer_R(seq)


for y in range (0,n0-s):
    R1 = dna1[-s-y:-s] + dna1_2_overlap
    seq = R1
    primer1_R = get_primer_R(seq)
    tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)
   
    y = 0
    print(tm)
    while tm < 60:
        R1 = dna1[-s-y:-s] + dna1_2_overlap
        seq = R1
        primer1_R = get_primer_R(seq)
        tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6) 
        y += 1
    else:
        print(primer1_R)
        print(y)
        print(tm)
        break

for y in range (0,n0-s):
    R2 = dna2[-s-y:-s] + dna2_3_overlap
    seq = R2
    primer2_R = get_primer_R(seq)
    tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)

    y = 0
    while tm < 60:
        R2 = dna2[-s-y:-s] + dna2_3_overlap
        seq = R2
        primer2_R = get_primer_R(seq)
        tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6) 
        y += 1
    else:
        print("primer2_R:",primer2_R)
        print(y)
        print(tm)
        break

for y in range (0,n0-s):
    R3 = dna3[-s-y:-s] + dna3_4_overlap
    seq = R3
    primer3_R = get_primer_R(seq)
    tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)

    y = 0
    while tm < 60:
        R3 = dna3[-s-y:-s] + dna3_4_overlap
        seq = R3
        primer3_R = get_primer_R(seq)
        tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6) 
        y += 1
    else:
        print("primer3_R:",primer3_R)
        print(y)
        print(tm)
        break
    
for y in range (0,n0-s):
    R4 = dna4[-s-y:-s] + dna4_1_overlap
    seq = R4
    primer4_R = get_primer_R(seq)
    tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6)

    y = 0
    while tm < 60:
        R4 = dna4[-s-y:-s] + dna4_1_overlap
        seq = R4
        primer4_R = get_primer_R(seq)
        tm = mt.Tm_NN(seq, dnac1 = 50, Na = 10, K = 10, Mg = 2, dNTPs = 0.6) 
        y += 1
    else:
        print("primer4_R:",primer4_R)
        print(y)
        print(tm)
        break

### get assembled gene and compare with target input
gene_assembly = dna1[0:-s] + dna2[0:-s] + dna3[0:-s] + dna4[0:-s]
input_seq = my_seq[i-1:]+my_seq[0:i-1]
gene_assembly == input_seq
