def similarity_percent(seq1, seq2):
    """두 서열 길이 같을 때 동일 염기 비율 계산"""
    matches = sum(nt1 == nt2 for nt1, nt2 in zip(seq1, seq2))
    return (matches / len(seq1))*100 if len(seq1) > 0 else 0

def score_bio_transcription_translation(seq):
    seq = seq.upper()
    seq_len = len(seq)  # TSS라고 가정 (ATG 직전)
    
    # Consensus sequences
    consensus_35 = 'TTGACA'
    consensus_10 = 'TATAAT'
    consensus_sd = 'AGGAGG'
    
    # 위치 계산 (motif 길이 6nt)
    pos_35 = seq_len - 35 - 6
    pos_10 = seq_len - 10 - 6
    
    # -35, -10 영역 서열
    motif_35 = seq[pos_35:pos_35+6] if pos_35 >= 0 else ''
    motif_10 = seq[pos_10:pos_10+6] if pos_10 >= 0 else ''
    
    # -35, -10 각각 similarity
    sim_35 = similarity_percent(motif_35, consensus_35) if len(motif_35) == 6 else 0
    sim_10 = similarity_percent(motif_10, consensus_10) if len(motif_10) == 6 else 0
    transcription_percent = (sim_35 + sim_10) / 2  # 평균값
    
    # Shine-Dalgarno 구간: TSS-20~TSS-3 (상류 3~15nt 영역)
    sd_start = max(0, seq_len - 20)
    sd_end = max(0, seq_len - 3)
    sd_region = seq[sd_start:sd_end]
    
    # Shine-Dalgarno 최대 퍼센트 찾기 (window size 6)
    max_sd_sim = 0
    for i in range(len(sd_region) - 5):
        window = sd_region[i:i+6]
        sim = similarity_percent(window, consensus_sd)
        if sim > max_sd_sim:
            max_sd_sim = sim
    
    translation_percent = max_sd_sim  # 번역 가능성 지표로 사용
    
    return {
        'transcription_percent': transcription_percent,
        'translation_percent': translation_percent
    }

# 서열 입력 (TDH3) (입력 서열은 ATG 직전까지)
seq = "CTATTTTCGAGGACCTTGTCACCTTGAGCCCAAGAGAGCCAAGATTTAAATTTTCCTATGACTTGATGCAAATTCCCAAAGCTAATAACATGCAAGACACGTACGGTCAAGAAGACATATTTGACCTCTTAACAGGTTCAGACGCGACTGCCTCATCAGTAAGACCCGTTGAAAAGAACTTACCTGAAAAAAACGAATATATACTAGCGTTGAATGTTAGCGTCAACAACAAGAAGTTTAATGACGCGGAGGCCAAGGCAAAAAGATTCCTTGATTACGTAAGGGAGTTAGAATCATTTTGAATAAAAAACACGCTTTTTCAGTTCGAGTTTATCATTATCAATACTGCCATTTCAAAGAATACGTAAATAATTAATAGTAGTGATTTTCCTAACTTTATTTAGTCAAAAAATTAGCCTTTTAATTCTGCTGTAACCCGTACATGCCCAAAATAGGGGGCGGGTTACACAGAATATATAACATCGTAGGTGTCTGGGTGAACAGTTTATTCCTGGCATCCACTAAATATAATGGAGCCCGCTTTTTAAGCTGGCATCCAGAAAAAAAAAGAATCCCAGCACCAAAATATTGTTTTCTTCACCAACCATCAGTTCATAGGTCCATTCTCTTAGCGCAACTACAGAGAACAGGGGCACAAACAGGCAAAAAACGGGCACAACCTCAATGGAGTGATGCAACCTGCCTGGAGTAAATGATGACACAAGGCAATTGACCCACGCATGTATCTATCTCATTTTCTTACACCTTCTATTACCTTCTGCTCTCTCTGATTTGGAAAAAGCTGAAAAAAAAGGTTGAAACCAGTTCCCTGAAATTATTCCCCTACTTGACTAATAAGTATATAAAGACGGTAGGTATTGATTGTAATTCTGTAAATCTATTTCTTAAACTTCTTAAATTCTACTTTTAAGTTAGTCTTTTTTTTAGTTTTAAAACACCAAGAACTTAGTTTCGAATAAACACACATAAACAAACAAATGCG"  
result = score_bio_transcription_translation(seq)
print(result)

{
  "transcription_percent": 25.0,
  "translation_percent": 33.33333333333333
}
